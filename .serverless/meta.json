{
  "/Users/risvitareq/code/producer-collab": {
    "versionSfCore": null,
    "versionFramework": "4.0.35",
    "isWithinCompose": false,
    "composeOrgName": null,
    "servicePath": "/Users/risvitareq/code/producer-collab",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "serverless-express-apollo",
      "provider": {
        "name": "aws",
<<<<<<< HEAD
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "environment": {
          "BUCKET": "react-image-upload-ivsir",
          "MY_AWS_PROFILE": "ivsir-general",
          "MY_AWS_REGION": "us-west-1",
          "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab"
=======
        "runtime": "nodejs14.x",
        "region": "us-east-1",
        "environment": {
          "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab",
          "BUCKET": "react-image-upload-ivsir"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-express-apollo-dev-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-express-apollo",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-express-apollo-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-express-apollo-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-express-apollo",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
<<<<<<< HEAD
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-express-apollo/dev/1717542797140-2024-06-04T23:13:17.140Z/serverless-express-apollo.zip"
                },
                "Handler": "server/server.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "serverless-express-apollo-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "BUCKET": "react-image-upload-ivsir",
                    "MY_AWS_PROFILE": "ivsir-general",
                    "MY_AWS_REGION": "us-west-1",
                    "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionCcyjA3lSi83H4eAjex6qhWBoReggW7bZNupCInqICw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "+g7goCqdUc5TW5TfkLVwf1B0IJgQ4xXAYotOdTpcanE="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-serverless-express-apollo",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceCreateDashs3Dashfolder": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "create-s3-folder",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserDashfolders": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "user-folders",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceImages": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "images",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAudiofiles": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "audiofiles",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUpload": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "upload",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSinglepostDashimage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "singlepost-image",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceFiles": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "files",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGraphql": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "graphql",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodCreateDashs3DashfolderPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCreateDashs3Dashfolder"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserDashfoldersGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserDashfolders"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodImagesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceImages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAudiofilesPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAudiofiles"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUploadPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpload"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodImagesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceImages"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAudiofilesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAudiofiles"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSinglepostDashimageGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSinglepostDashimage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodFilesGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceFiles"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGraphqlAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGraphql"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1717542771015": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodCreateDashs3DashfolderPost",
                "ApiGatewayMethodUserDashfoldersGet",
                "ApiGatewayMethodImagesPost",
                "ApiGatewayMethodAudiofilesPost",
                "ApiGatewayMethodUploadPost",
                "ApiGatewayMethodImagesGet",
                "ApiGatewayMethodAudiofilesGet",
                "ApiGatewayMethodSinglepostDashimageGet",
                "ApiGatewayMethodFilesGet",
                "ApiGatewayMethodGraphqlAny"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
=======
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
<<<<<<< HEAD
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionCcyjA3lSi83H4eAjex6qhWBoReggW7bZNupCInqICw"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-ServiceEndpoint"
=======
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
<<<<<<< HEAD
        },
        "vpc": {}
=======
        }
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
      },
      "functions": {
        "app": {
          "handler": "server/server.handler",
          "events": [
            {
              "http": {
                "path": "create-s3-folder",
<<<<<<< HEAD
                "method": "post",
                "integration": "AWS_PROXY"
=======
                "method": "post"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "user-folders",
<<<<<<< HEAD
                "method": "get",
                "integration": "AWS_PROXY"
=======
                "method": "get"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "images",
<<<<<<< HEAD
                "method": "post",
                "integration": "AWS_PROXY"
=======
                "method": "post"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "audiofiles",
<<<<<<< HEAD
                "method": "post",
                "integration": "AWS_PROXY"
=======
                "method": "post"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "upload",
<<<<<<< HEAD
                "method": "post",
                "integration": "AWS_PROXY"
=======
                "method": "post"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "images",
<<<<<<< HEAD
                "method": "get",
                "integration": "AWS_PROXY"
=======
                "method": "get"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "audiofiles",
<<<<<<< HEAD
                "method": "get",
                "integration": "AWS_PROXY"
=======
                "method": "get"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "singlepost-image",
<<<<<<< HEAD
                "method": "get",
                "integration": "AWS_PROXY"
=======
                "method": "get"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "files",
<<<<<<< HEAD
                "method": "get",
                "integration": "AWS_PROXY"
=======
                "method": "get"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            },
            {
              "http": {
                "path": "graphql",
<<<<<<< HEAD
                "method": "any",
                "integration": "AWS_PROXY"
=======
                "method": "any"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
              }
            }
          ],
          "name": "serverless-express-apollo-dev-app",
<<<<<<< HEAD
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionCcyjA3lSi83H4eAjex6qhWBoReggW7bZNupCInqICw"
        }
      },
      "plugins": [
        "serverless-offline",
        "serverless-dotenv-plugin"
=======
          "package": {}
        }
      },
      "plugins": [
        "serverless-offline"
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
      ],
      "custom": {
        "serverless-offline": {
          "httpPort": 4001
<<<<<<< HEAD
        },
        "dotenv": {
          "path": "./server/.env"
        }
      },
      "package": {
        "exclude": [
          "client/**",
          "package-lock.json",
          "node_modules"
        ],
        "artifactsS3KeyDirname": "serverless/serverless-express-apollo/dev/code-artifacts",
        "artifact": "/Users/risvitareq/code/producer-collab/.serverless/serverless-express-apollo.zip",
        "artifactDirectoryName": "serverless/serverless-express-apollo/dev/1717542797140-2024-06-04T23:13:17.140Z"
      }
    },
    "serviceRawFile": "service: serverless-express-apollo\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n  environment:\n  #   MONGODB_URI: mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab\n  #   BUCKET: react-image-upload-ivsir\nfunctions:\n  app:\n    handler: server/server.handler\n    events:\n      - http:\n          path: create-s3-folder\n          method: post\n      - http:\n          path: user-folders\n          method: get\n      - http:\n          path: images\n          method: post\n      - http:\n          path: audiofiles\n          method: post\n      - http:\n          path: upload\n          method: post\n      - http:\n          path: images\n          method: get\n      - http:\n          path: audiofiles\n          method: get\n      - http:\n          path: singlepost-image\n          method: get\n      - http:\n          path: files\n          method: get\n      - http:\n          path: graphql\n          method: any\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin\n\ncustom:\n  serverless-offline:\n    httpPort: 4001\n  dotenv:\n    path: ./server/.env\n\npackage:\n  exclude:\n    - client/** \n    - package-lock.json\n    - node_modules",
=======
        }
      }
    },
    "serviceRawFile": "service: serverless-express-apollo\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  region: us-east-1\n  environment:\n    MONGODB_URI: mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab\n    BUCKET: react-image-upload-ivsir\n\nfunctions:\n  app:\n    handler: server/server.handler\n    events:\n      - http:\n          path: create-s3-folder\n          method: post\n      - http:\n          path: user-folders\n          method: get\n      - http:\n          path: images\n          method: post\n      - http:\n          path: audiofiles\n          method: post\n      - http:\n          path: upload\n          method: post\n      - http:\n          path: images\n          method: get\n      - http:\n          path: audiofiles\n          method: get\n      - http:\n          path: singlepost-image\n          method: get\n      - http:\n          path: files\n          method: get\n      - http:\n          path: graphql\n          method: any\n\nplugins:\n  - serverless-offline\n\ncustom:\n  serverless-offline:\n    httpPort: 4001",
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
    "command": [
      "deploy"
    ],
    "options": {},
<<<<<<< HEAD
    "error": null,
=======
    "error": {
      "message": "Cannot read file client/node_modules/istanbul-lib-report/node_modules/semver/functions/rcompare.js due to: EMFILE: too many open files, open '/Users/risvitareq/code/producer-collab/client/node_modules/istanbul-lib-report/node_modules/semver/functions/rcompare.js'",
      "stack": "ServerlessError3: Cannot read file client/node_modules/istanbul-lib-report/node_modules/semver/functions/rcompare.js due to: EMFILE: too many open files, open '/Users/risvitareq/code/producer-collab/client/node_modules/istanbul-lib-report/node_modules/semver/functions/rcompare.js'\n    at file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:818:26575\n    at tryCatcher (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:443:81525)\n    at Promise2._settlePromiseFromHandler (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:621:10135)\n    at Promise2._settlePromise (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:621:11454)\n    at Promise2._settlePromise0 (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:621:12511)\n    at Promise2._settlePromises (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:621:14107)\n    at _drainQueueStep (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:450:583)\n    at _drainQueue (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:450:479)\n    at Async._drainQueues (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:450:716)\n    at Async.drainQueues [as _onImmediate] (file:///Users/risvitareq/.serverless/releases/4.0.35/package/dist/sf-core.js:446:3279)\n    at process.processImmediate (node:internal/timers:478:21)",
      "code": "CANNOT_READ_FILE"
    },
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "031ce66e-846a-4177-9803-7027e5d26c87",
    "orgName": "producercollab",
    "userId": "Y2DkMTBGVXz0HjQ6bv",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "producercollab",
    "subscription": null,
    "userEmail": "ivsirqerat@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "614288690243",
    "versionSf": "4.0.35",
    "serviceProviderAwsCfStackName": "serverless-express-apollo-dev",
<<<<<<< HEAD
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:614288690243:stack/serverless-express-apollo-dev/a73a55d0-229e-11ef-8669-120b3274691f",
    "serviceProviderAwsCfStackCreated": "2024-06-04T18:17:07.845Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-04T23:07:51.685Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:614288690243:function:serverless-express-apollo-dev-app:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-express-apollo-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://17yjc57zyk.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-serverless-express-apollo-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-express-apollo-serverlessdeploymentbuck-7gewbzrgdmy1",
        "ExportName": "sls-serverless-express-apollo-dev-ServerlessDeploymentBucketName"
      }
    ]
=======
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
>>>>>>> 717463f364bb2018e52d7874d5bf6a1385cd87a6
  }
}