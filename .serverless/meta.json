{
  "/Users/risvitareq/code/producer-collab": {
    "versionSfCore": null,
    "versionFramework": "4.0.38",
    "isWithinCompose": false,
    "composeOrgName": null,
    "servicePath": "/Users/risvitareq/code/producer-collab",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "serverless-express-apollo",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization",
              "x-user-id",
              "x-file-type",
              "x-project-author"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "OPTIONS"
            ]
          }
        },
        "environment": {
          "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab",
          "MY_AWS_PROFILE": "ivsir-general",
          "MY_AWS_REGION": "us-west-1",
          "BUCKET": "react-image-upload-ivsir"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::react-image-upload-ivsir/*",
              "arn:aws:s3:::react-image-upload-ivsir"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sts:AssumeRole"
            ],
            "Resource": "arn:aws:iam::614288690243:user/ivsir"
          }
        ],
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-express-apollo-dev-app"
              }
            },
            "RestApiHandlerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-express-apollo-dev-restApiHandler"
              }
            },
            "GetSinglePostImageLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/serverless-express-apollo-dev-getSinglePostImage"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "serverless-express-apollo",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-express-apollo-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-express-apollo-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:ListBucket"
                          ],
                          "Resource": [
                            "arn:aws:s3:::react-image-upload-ivsir/*",
                            "arn:aws:s3:::react-image-upload-ivsir"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sts:AssumeRole"
                          ],
                          "Resource": "arn:aws:iam::614288690243:user/ivsir"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "serverless-express-apollo",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-express-apollo/dev/1717780215005-2024-06-07T17:10:15.005Z/serverless-express-apollo.zip"
                },
                "Handler": "server/server.graphqlHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "serverless-express-apollo-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab",
                    "MY_AWS_PROFILE": "ivsir-general",
                    "MY_AWS_REGION": "us-west-1",
                    "BUCKET": "react-image-upload-ivsir"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "RestApiHandlerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-express-apollo/dev/1717780215005-2024-06-07T17:10:15.005Z/serverless-express-apollo.zip"
                },
                "Handler": "server/server.restHandler",
                "Runtime": "nodejs20.x",
                "FunctionName": "serverless-express-apollo-dev-restApiHandler",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab",
                    "MY_AWS_PROFILE": "ivsir-general",
                    "MY_AWS_REGION": "us-west-1",
                    "BUCKET": "react-image-upload-ivsir"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RestApiHandlerLogGroup"
              ]
            },
            "GetSinglePostImageLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/serverless-express-apollo/dev/1717780215005-2024-06-07T17:10:15.005Z/serverless-express-apollo.zip"
                },
                "Handler": "server/server.getSinglePostImage",
                "Runtime": "nodejs20.x",
                "FunctionName": "serverless-express-apollo-dev-getSinglePostImage",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab",
                    "MY_AWS_PROFILE": "ivsir-general",
                    "MY_AWS_REGION": "us-west-1",
                    "BUCKET": "react-image-upload-ivsir"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSinglePostImageLogGroup"
              ]
            },
            "AppLambdaVersion2CVwgXo5DyltGw2kVziuUQrstUVascj37P485jrOcg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "6aAcuRZIAtTDDpuOSkSu0yGqTQSw0C1YmmOtCVjtcKA="
              }
            },
            "RestApiHandlerLambdaVersionmfWPEBsTwmTn0UtFwkGxEuoouJHvrF1C4pM4J8UhIY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RestApiHandlerLambdaFunction"
                },
                "CodeSha256": "6aAcuRZIAtTDDpuOSkSu0yGqTQSw0C1YmmOtCVjtcKA="
              }
            },
            "GetSinglePostImageLambdaVersionX0h8IDw96PPbU2yaKGdk4cPEACMHPSsrSPF0HIaUdA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSinglePostImageLambdaFunction"
                },
                "CodeSha256": "6aAcuRZIAtTDDpuOSkSu0yGqTQSw0C1YmmOtCVjtcKA="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-serverless-express-apollo",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceGraphql": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "graphql",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlayground": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "playground",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSinglepostDashimage": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "singlepost-image",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGraphqlOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGraphql"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlaygroundOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlayground"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSinglepostDashimageOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,x-user-id,x-file-type,x-project-author'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSinglepostDashimage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGraphqlAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGraphql"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodPlaygroundAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlayground"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSinglepostDashimageGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSinglepostDashimage"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetSinglePostImageLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetSinglePostImageLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1717780206937": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodGraphqlOptions",
                "ApiGatewayMethodPlaygroundOptions",
                "ApiGatewayMethodSinglepostDashimageOptions",
                "ApiGatewayMethodGraphqlAny",
                "ApiGatewayMethodPlaygroundAny",
                "ApiGatewayMethodSinglepostDashimageGet"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSinglePostImageLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSinglePostImageLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-serverless-express-apollo",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Authorization",
                    "x-user-id",
                    "x-file-type",
                    "x-project-author"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "OPTIONS"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "RestApiHandlerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RestApiHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationRestApiHandler": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "RestApiHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteAnyProxyVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationRestApiHandler"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationRestApiHandler"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersion2CVwgXo5DyltGw2kVziuUQrstUVascj37P485jrOcg"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "RestApiHandlerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RestApiHandlerLambdaVersionmfWPEBsTwmTn0UtFwkGxEuoouJHvrF1C4pM4J8UhIY"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-RestApiHandlerLambdaFunctionQualifiedArn"
              }
            },
            "GetSinglePostImageLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSinglePostImageLambdaVersionX0h8IDw96PPbU2yaKGdk4cPEACMHPSsrSPF0HIaUdA"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-GetSinglePostImageLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-serverless-express-apollo-dev-HttpApiUrl"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "app": {
          "handler": "server/server.graphqlHandler",
          "events": [
            {
              "http": {
                "path": "graphql",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "playground",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "serverless-express-apollo-dev-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersion2CVwgXo5DyltGw2kVziuUQrstUVascj37P485jrOcg"
        },
        "restApiHandler": {
          "handler": "server/server.restHandler",
          "events": [
            {
              "httpApi": {
                "path": "/{proxy+}",
                "method": "ANY"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/{proxy+}"
            }
          ],
          "name": "serverless-express-apollo-dev-restApiHandler",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "RestApiHandlerLambdaVersionmfWPEBsTwmTn0UtFwkGxEuoouJHvrF1C4pM4J8UhIY"
        },
        "getSinglePostImage": {
          "handler": "server/server.getSinglePostImage",
          "events": [
            {
              "http": {
                "path": "singlepost-image",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "GET",
                    "OPTIONS"
                  ],
                  "headers": [
                    "Content-Type",
                    "Authorization",
                    "x-user-id",
                    "x-file-type",
                    "x-project-author"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "serverless-express-apollo-dev-getSinglePostImage",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetSinglePostImageLambdaVersionX0h8IDw96PPbU2yaKGdk4cPEACMHPSsrSPF0HIaUdA"
        }
      },
      "plugins": [
        "serverless-offline",
        "serverless-prune-plugin"
      ],
      "custom": {
        "serverless-offline": {
          "httpPort": 4001
        },
        "prune": {
          "automatic": true,
          "number": 3
        }
      },
      "package": {
        "exclude": [
          "client/**",
          "package-lock.json",
          "node_modules/**"
        ],
        "excludeDevDependencies": true,
        "artifactsS3KeyDirname": "serverless/serverless-express-apollo/dev/code-artifacts",
        "artifact": "/Users/risvitareq/code/producer-collab/.serverless/serverless-express-apollo.zip",
        "artifactDirectoryName": "serverless/serverless-express-apollo/dev/1717780215005-2024-06-07T17:10:15.005Z"
      }
    },
    "serviceRawFile": "service: serverless-express-apollo\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n  httpApi:\n    cors:\n      allowedOrigins:\n        - '*'\n      allowedHeaders:\n        - Content-Type\n        - Authorization\n        - x-user-id\n        - x-file-type\n        - x-project-author\n      allowedMethods:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n        - OPTIONS\n  environment:\n    MONGODB_URI: mongodb+srv://ivsir:Ulang1411!@producer-collab.dyoeqvd.mongodb.net/?retryWrites=true&w=majority&appName=producer-collab\n    MY_AWS_PROFILE: ivsir-general\n    MY_AWS_REGION: us-west-1\n    BUCKET: react-image-upload-ivsir\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n        - s3:GetObject\n        - s3:ListBucket\n      Resource:\n        - \"arn:aws:s3:::react-image-upload-ivsir/*\"\n        - \"arn:aws:s3:::react-image-upload-ivsir\"\n    - Effect: Allow\n      Action:\n        - sts:AssumeRole\n      Resource: \"arn:aws:iam::614288690243:user/ivsir\"\n\nfunctions:\n  app:\n    handler: server/server.graphqlHandler\n    events:\n      - http:\n          path: graphql\n          method: any\n          cors: true\n      - http:\n          path: playground\n          method: ANY\n          cors: true\n  restApiHandler:\n    handler: server/server.restHandler\n    events:\n      - httpApi:\n          path: /{proxy+}\n          method: ANY\n  getSinglePostImage:\n    handler: server/server.getSinglePostImage\n    events:\n      - http:\n          path: singlepost-image\n          method: GET\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - Authorization\n              - x-user-id\n              - x-file-type\n              - x-project-author\n            methods:\n              - GET\n              - OPTIONS        \n\nplugins:\n  - serverless-offline\n  - serverless-prune-plugin\n\ncustom:\n  serverless-offline:\n    httpPort: 4001\n  prune:\n    automatic: true\n    number: 3\n\npackage:\n  exclude:\n    - client/** \n    - package-lock.json\n    - node_modules/**\n  excludeDevDependencies: true\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "031ce66e-846a-4177-9803-7027e5d26c87",
    "orgName": "producercollab",
    "userId": "Y2DkMTBGVXz0HjQ6bv",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "producercollab",
    "subscription": null,
    "userEmail": "ivsirqerat@gmail.com",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "614288690243",
    "versionSf": "4.0.38",
    "serviceProviderAwsCfStackName": "serverless-express-apollo-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:614288690243:stack/serverless-express-apollo-dev/a73a55d0-229e-11ef-8669-120b3274691f",
    "serviceProviderAwsCfStackCreated": "2024-06-04T18:17:07.845Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-07T17:10:38.824Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "RestApiHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:614288690243:function:serverless-express-apollo-dev-restApiHandler:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-express-apollo-dev-RestApiHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSinglePostImageLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:614288690243:function:serverless-express-apollo-dev-getSinglePostImage:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-express-apollo-dev-GetSinglePostImageLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:614288690243:function:serverless-express-apollo-dev-app:34",
        "Description": "Current Lambda function version",
        "ExportName": "sls-serverless-express-apollo-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "5wgel7uoui",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-serverless-express-apollo-dev-HttpApiId"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://17yjc57zyk.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-serverless-express-apollo-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-express-apollo-serverlessdeploymentbuck-7gewbzrgdmy1",
        "ExportName": "sls-serverless-express-apollo-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://5wgel7uoui.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-serverless-express-apollo-dev-HttpApiUrl"
      }
    ]
  }
}